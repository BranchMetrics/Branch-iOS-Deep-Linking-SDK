iOS SDK Release Procedure
=========================
### Last update: 1/4/2016

# Steps to release the iOS SDK:

1) Decide which pull requests and changes will be included in the release.
    * Are they fixing a partner issue?
    * Are there tests that verify the correctness of the change?

2) Accept the pull requests and merge them into the 'staging' branch of the project.
    * Get a thumbs-up from at least one person.
    * Merge them one at a time to avoid source code conflicts.
      - Prefer 'squash' merges over plain merges when practical.  This merges the PR in a single
        commit which is easily understood and can be backed-out as a unit if necessary.
    * Delete the branches you merge.  They can be restored later if necessary.

3) When you're ready to prepare a release, merge the 'staging' branch into the 'QA' branch.
   - Testing on the QA branch keeps the staging branch unblocked for continuos development.
   - All final testing is done on the QA branch of the code.
   - All fixes for bugs found while testing are made to the QA branch.
   - QA the release candidate:
     * Does it compile in Xcode 8?
     * Does it pass static analysis?
     * Does it pass all the manual tests?
       (test suite ref: http://branch.testrail.net)
     * Does it compile in Xcode 7?
     * Do all of the code examples compile?
       - TestBed
       - TestBed-Swift
       - TestBed-iMessenger

4) Congratulations!  All tests have passed.  The code is sleek.  The documentation is updated.
   Time to make a release.

5) For a Beta release, on the QA branch:
   - Update the version number. ./scripts/version -i
   - Update the release notes in ./ChangeLog.md.
   - Merge the 'QA' branch into 'beta' branch.
   - Merge the 'QA' branch into the 'staging' branch.
   - Talk with Elizabeth about sending an email announcement to the beta testers.
   - Done!

6) For a production release (from either 'beta' or 'QA'):
   - The script ./scripts/deploy-release is a master script that calls the other deploy scripts.
     * Each part of the deploy is broken out into sub-scripts so each part can be easily be re-run.
   - The script ./scripts/deploy-release does several things:
     * Does a pre-flight check to make sure the release script will succeed.
     * Opens ChangeLog.md in vim.  This is your last chance to catch typos!
     * Lints the CocoaPod.
     * Builds the framework.
     * Zips and computes the checksum of the release files.
     * Builds and deploys the Carthage release.
     * Tags and commits the code to Github.
     * Uploads the framework to Fabric.
     * Pushes the release pod to CocoaPods.
     * Uploads the release files to Amazon S3.
     * Prompts you, the user, to update the Github and Google release announcement pages.
     * Opens the Fabric.app on your computer so you can check that the released version is correct.
     * Opens the Branch CocoaPod web page so you can check that the released version is correct.

   - Important Note about Carthage:
     * The Carthage Xcode project is separate from the main Testbed one, however, the SDK-related
       files in this project are symbolic links to the main ones (so that updates to the original
       files are reflected in Carthage).
     * This means if you add new files to the main Xcode Project, make sure to add them to the
       Carthage one as well (but not as copies).

   - Release steps:
     * Make sure you have a browser window open and logged into your Branch Gmail account.
     * Also have a browser window open and logged into your Github account.
     * Check out and pull the latest code from that branch.
     * Update the version number ./scripts/version -i
     * Update the release notes in ./ChangeLog.md.

     * it opens the google group where we announce releases; have your work browser open and
       logged in to gmail.
     * Announce the release!

     * Prompts you, the user, to update the Github and Google release announcement pages.
     * Draft a new release in Github
       - The Github release page should be open in one of your browser windows.
       - Choose the release version, put some funny (required!) title and add the ChangeLog to the description.
       - In the attachment section, choose the zipped framework in the 'carthage-files' directory.
         (different from the fabric one).  This directory should be open in one of your Finder windows.
       - Publish the release.
     * Draft a new Google groups rele

7) Rejoice and pay tribute to Steve Jobs!

